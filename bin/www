#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
// var debug = require('debug')('fingerforlife:server');
var http = require('http');
var socketIO = require('socket.io');
var {Users} = require('./utils/users');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
  * Create Socket.io Server
*/
var io = socketIO(server);

/**
  * Create Users Object
*/
var users = new Users();

/**
  * Listen to socket.io connection
*/
io.on('connection', function(socket){
  console.log('Client has been connected to socket.io');

  socket.on('hostJoinRoom', (msg) => {
    socket.join(msg.room);
    users.removeUser(msg.id);
    users.addUser(msg.id, msg.room);

    //debug purpose
    var user = users.getUser(msg.id);
    console.log(`host with id: ${user.id} is joined in ${user.room}`);
  }),

  //debug purpose
  socket.on('charDesktop', (msg) => {
    socket.emit('charDesktopAcc', msg);
  }),

  socket.on('sendingTheWinner', (winner) => {
    var user = users.getUser(socket.id);
    io.to(user.room).emit('getTheWinner', winner);

    io.to(user.room).emit('toWinnerPage', winner);
  }),

  socket.on('getTheMessage', (message) => {
    if (message.theWinnerId == socket.id) {
      socket.emit('winning', 'YOU WIN');
    }else{
      socket.emit('losing', 'YOU LOSE');
    }
  }),

  socket.on('goBackHome', (msg) => {
    var user = users.getUser(socket.id);
    users.removeRoom(user.room);
    io.to(user.room).emit('backHome', msg);
  }),

  socket.on('ping', (message) => {
    socket.emit('pong', message);
  }),

  //When a room is already full
  //redirecting to the character page
  socket.on('roomFull', (msg) => {
    io.to(msg.room).emit('toCharPage');
  }),

  //When a user is selecting a character
  //And the character which is clicked is shown.
  socket.on('selectingChar', (msg) => {
    var user = users.getUser(socket.id);
    io.to(user.room).emit('charSelecting', msg);

    //debug purpose
    console.log(`Player with id: ${user.id} in room ${user.room} is selecting char number ${msg.val}`);
  }),

  socket.on('sendingChar', (msg) => {
    var user = users.getUser(socket.id);
    io.to(user.room).emit('charSent', msg);

    //debug purpose
    console.log(`Player with id: ${user.id} in room ${user.room} is choose char number ${msg.val}`);
  }),

  socket.on('charIsReady', (msg) => {
    console.log(`data is received ${msg}`);
    var user = users.getUser(socket.id);
    io.to(user.room).emit('startTheGame', msg);
  }),

  socket.on('stepClicked', (message) => {
    var user = users.getUser(socket.id);
    io.to(user.room).emit('moveThePlayer', socket.id);
    //supposed not error
  }),

  //debug purpose
  socket.on('charMobile', (msg) => {
    socket.emit('CharMobileAccepted', msg);
  }),

  // When a user requesting to join the game
  socket.on('requestToJoin', function(msg){
    var check = users.isRoomExist(msg.room);
    var roomList = users.getUserList(msg.room);

    //debug purpose
    console.log(`this is check ${check}`);

    if (check === true) {
      if (roomList.length === 3) {
        socket.emit('joinRejected', 'The room is already full');
      }
      else{
      socket.join(msg.room);
      users.removeUser(msg.id);
      users.addUser(msg.id, msg.room);

      //debug purpose
      var user = users.getUser(msg.id);
      console.log(`a user with id: ${user.id} has joined in ${user.room}`);
      // socket.broadcast.to(user.room).emit('requestAccepted', msg);

      io.to(user.room).emit('requestAccepted', msg);
      socket.emit('joinSucceed', 'Welcome to the game !');

      }
      //debug purpose
      // socket.broadcast.to(user.room).emit('joinSucceed', `a user with id: ${msg.id} is joined`);
    }else{
      socket.emit('joinRejected', 'The room is not exist');
    }
  });

  // socket.on('disconnect', () => {
  //   console.log('Client has been disconnected');
  //   var user = users.getUser(socket.id);
  //   io.to(user.room).emit('playerDisconnected', socket.id);
  //   users.removeUser(socket.id);
  // });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, (req, res) => {
  console.log("Listening to " + port);
});

//server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }
//
//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;
//
//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

/**
 * Event listener for HTTP server "listening" event.
 */

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
